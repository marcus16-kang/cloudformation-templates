AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ### Stack Configuration
  ProjectName:
    Type: String
    Description: "[REQUIRED] The name of this stack's project."
  
  ### ALB Configuration - General
  LoadBalancerName:
    Type: String
    Description: "[REQUIRED] The name of alb."
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "[REQUIRED] The id of alb security group's vpc."
  
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: "[REQUIRED] The id list of alb's subnets."
  
  Scheme:
    Type: String
    Description: "[REQUIRED] The type of alb."
    AllowedValues:
      - internal
      - internet-facing
    Default: internet-facing
  
  IpAddressType:
    Type: String
    Description: "[optional] The IP address type of alb."
    AllowedValues:
      - ipv4
      - dualstack
    Default: ipv4
  
  SecurityGroupName:
    Type: String
    Description: "[REQUIRED] The name of alb security group."
  
  ListenerPathPattern:
    Type: List<String>
    Description: "[REQUIRED] The path pattern list of listener. Type with comma(,).  For example, `/v1/test1,/v1/admin*,/v2/test1`."
  
  ### ALB Configuration - Target Group
  TargetGroupName:
    Type: String
    Description: "[REQUIRED] The name of target group."
  
  TargetType:
    Type: String
    Description: "[REQUIRED] the type of target group."
    AllowedValues:
      - instance
      - ip
      - lambda
      - alb
  
  TargetSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: "[optional] The id of alb target gruop's security group."
  
  TargetPort:
    Type: Number
    Description: "[REQUIRED] The port number of target group."
    Default: "80"
  
  HealthCheckPath:
    Type: String
    Description: "[REQUIRED] The health check path of target group. It should end with `/`."
    Default: /
  
  ### ALB Configuration - Access Log
  AccessLogBucketName:
    Type: String
    Description: "[REQUIRED] The name of alb access log bucket."
  
  AccessLogPrefix:
    Type: String
    Description: "[optional] The prefix of alb access log. It cannot start or end with `/`."
    Default: ""
    AllowedPattern: ^(?!\/).*(?<!\/)$
  

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Configuration
        Parameters:
          - ProjectName
    
      - Label:
          default: ALB Configuration - General
        Parameters:
          - LoadBalancerName
          - VpcId
          - Subnets
          - Scheme
          - IpAddressType
          - SecurityGroupName
          - ListenerPathPattern
      
      - Label:
          default: ALB Configuration - Target Group
        Parameters:
          - TargetGroupName
          - TargetType
          - TargetSecurityGroupId
          - TargetPort
          - HealthCheckPath
      
      - Label:
          default: ALB Configuration - Access Log
        Parameters:
          - AccessLogBucketName
          - AccessLogPrefix

Mappings:
  AccessLogAccountId:
    us-east-1:
      accountid: "127311923021"
    us-east-2:
      accountid: "033677994240"
    us-west-1:
      accountid: "027434742980"
    us-west-2:
      accountid: "797873946194"
    af-south-1:
      accountid: "098369216593"
    ap-east-1:
      accountid: "754344448648"
    ap-southeast-3:
      accountid: "589379963580"
    ap-south-1:
      accountid: "718504428378"
    ap-northeast-3:
      accountid: "383597477331"
    ap-northeast-2:
      accountid: "600734575887"
    ap-southeast-1:
      accountid: "114774131450"
    ap-southeast-2:
      accountid: "783225319266"
    ap-northeast-1:
      accountid: "582318560864"
    ca-central-1:
      accountid: "985666609251"
    eu-central-1:
      accountid: "054676820928"
    eu-west-1:
      accountid: "156460612806"
    eu-west-2:
      accountid: "652711504416"
    eu-south-1:
      accountid: "635631232127"
    eu-west-3:
      accountid: "009996457667"
    eu-north-1:
      accountid: "897822967062"
    me-south-1:
      accountid: "076674570225"
    sa-east-1:
      accountid: "507241528517"

Conditions:
  IsInternal: !Equals [!Ref Scheme, internal]

  UseTargetSecurityGroup: !Not [!Equals [!Ref TargetSecurityGroupId, ""]]
  
  UseAccessLogPrefix: !Not [!Equals [!Ref AccessLogPrefix, ""]]

Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref SecurityGroupName
      GroupName: !Ref SecurityGroupName
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Ref SecurityGroupName
        - Key: project
          Value: !Ref ProjectName
  
  SecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: UseTargetSecurityGroup
    Properties:
      Description: "App"
      DestinationSecurityGroupId: !Ref TargetSecurityGroupId
      GroupId: !GetAtt SecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: !Ref TargetPort
      ToPort: !Ref TargetPort
  
  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: UseTargetSecurityGroup
    Properties:
      Description: "ELB"
      FromPort: !Ref TargetPort
      ToPort: !Ref TargetPort
      GroupId: !Ref TargetSecurityGroupId
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt SecurityGroup.GroupId


  AccessLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Ref AccessLogBucketName
      IntelligentTieringConfigurations:
        - Id: intelligence-tiering
          Status: Enabled
          Tierings:
            - AccessTier: ARCHIVE_ACCESS
              Days: 90
            - AccessTier: DEEP_ARCHIVE_ACCESS 
              Days: 180
      LifecycleConfiguration:
        Rules:
          - Id: intelligence-tiering
            NoncurrentVersionTransitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
              - StorageClass: ONEZONE_IA
                TransitionInDays: 90
              - StorageClass: GLACIER
                TransitionInDays: 180
              - StorageClass: DEEP_ARCHIVE
                TransitionInDays: 360
            Status: Enabled
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 0
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: project
          Value: !Ref ProjectName
      VersioningConfiguration:
        Status: Enabled
  
  AccessLogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub
                - arn:aws:iam::${account_id}:root
                - account_id: !FindInMap [ AccessLogAccountId, !Ref "AWS::Region", accountid ]
            Action: s3:PutObject
            Resource: !Sub
              - "arn:aws:s3:::${bucket_name}/${prefix}AWSLogs/${account_id}/*"
              - bucket_name: !Ref AccessLogBucket
                prefix: !If
                  - UseAccessLogPrefix
                  - !Sub "${AccessLogPrefix}/"
                  - ""
                account_id: !Ref AWS::AccountId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AccessLogBucketPolicy
    Properties:
      IpAddressType: !Ref IpAddressType
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: true                               # `true`(default) or `false`
        - Key: access_logs.s3.enabled
          Value: true                               # `false`(defualt) or `true`
        - Key: access_logs.s3.bucket
          Value: !Ref AccessLogBucket
        - Key: access_logs.s3.prefix
          Value: !Ref AccessLogPrefix
        # - Key: ipv6.deny_all_igw_traffic
        #   Value: !If [IsInternal, true, false]C:\Project\marcus16-kang\cloudformation-templates\elb\application-load-balancer.yaml
        - Key: idle_timeout.timeout_seconds
          Value: '60'                               # `60`(default), 1~4000'target_group_health.dns_failover.minimum_healthy_targets.count' must be 'off' or a positive intege
        - Key: routing.http.desync_mitigation_mode
          Value: defensive                          # `defensive`(default), `monitor` or `strictest`
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: false                              # `false`(default) or `true`
        - Key: routing.http.preserve_host_header.enabled
          Value: false                              # `false`(default) or `true`
        - Key: routing.http.x_amzn_tls_version_and_cipher_suite.enabled
          Value: false                              # `false`(default) or `true`
        - Key: routing.http.xff_client_port.enabled
          Value: false                              # `false`(default) or `true`
        - Key: routing.http.xff_header_processing.mode
          Value: append                             # `append`(default), `preserve` or `remove`
        - Key: routing.http2.enabled
          Value: true                               # `true`(default) or `false`
        - Key: waf.fail_open.enabled
          Value: false                              # `false`(default) or `true`
      Name: !Ref LoadBalancerName
      Scheme: !Ref Scheme
      SecurityGroups:
        - !GetAtt SecurityGroup.GroupId
      Subnets: !Ref Subnets
      Tags:
        - Key: Name
          Value: LoadBalancerName
        - Key: project
          Value: !Ref ProjectName
      Type: application
  
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true                      # `true` or `false`. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.
      HealthCheckIntervalSeconds: 30                # `5` ~ `30`. If the target group protocol is TCP, TLS, UDP, TCP_UDP, HTTP or HTTPS, the default is `30` seconds. If the target group protocol is GENEVE, the default is `10` seconds. If the target type is lambda, the default is `35` seconds.
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckPort: traffic-port                 # `traffic-port`(default), which is the port on which each target receives traffic from the load balancer.
      HealthCheckProtocol: HTTP                     # `GENEVE`, `HTTP`, `HTTPS`, `TCP`, `TCP_UDP`, `TLS`, `UDP`
      HealthCheckTimeoutSeconds: 6                  # `2` ~ `30`. For target groups with a protocol of HTTP, the default is `6` seconds. For target groups with a protocol of TCP, TLS or HTTPS, the default is `10` seconds. For target groups with a protocol of GENEVE, the default is `5` seconds. If the target type is lambda, the default is `30` seconds.
      HealthyThresholdCount: 5                      # `2` ~ `10`. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is `5`. For target groups with a protocol of GENEVE, the default is `3`. If the target type is lambda, the default is `5`.
      IpAddressType: ipv4                           # `ipv4`(default) or `ipv6`
      Matcher:
        HttpCode: '200'
      Name: !Ref TargetGroupName
      Port: !Ref TargetPort
      Protocol: HTTP                                # `GENEVE`, `HTTP`, `HTTPS`, `TCP`, `TCP_UDP`, `TLS`, `UDP`
      ProtocolVersion: HTTP1                        # `HTTP1`, `HTTP2`, `GRPC`
      Tags:
        - Key: Name
          Value: !Ref TargetGroupName
        - Key: project
          Value: !Ref ProjectName
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'                              # `300`(default), `0` ~ `3600`. If the target is a Lambda function, this attribute is not supported.
        - Key: stickiness.enabled
          Value: 'false'                            # `false`(default) or `true`
        # - Key: stickiness.type
        #   Value: lb_cookie                          # `lb_cookie` or `app_cookie`
        - Key: load_balancing.cross_zone.enabled
          Value: use_load_balancer_configuration    # `use_load_balancer_configuration`(default), `true` or `false`
        - Key: target_group_health.dns_failover.minimum_healthy_targets.count
          Value: 'off'                              # `off`(default), The possible values are off or an integer from 1 to the maximum number of targets.
        - Key: target_group_health.dns_failover.minimum_healthy_targets.percentage
          Value: 'off'                              # `off`(default), The possible values are off or an integer from 1 to 100.
        - Key: target_group_health.unhealthy_state_routing.minimum_healthy_targets.count
          Value: '1'                                # `1`(default), The possible values are 1 to the maximum number of targets.
        - Key: target_group_health.unhealthy_state_routing.minimum_healthy_targets.percentage
          Value: 'off'                              # `off`(default), The possible values are off or an integer from 1 to 100.
        - Key: load_balancing.algorithm.type
          Value: round_robin                        # `round_robin`(default) or `least_outstanding_requests`
        - Key: slow_start.duration_seconds
          Value: '0'                                # `0`(disabled, default) or `30` ~ `900`
        # - Key: stickiness.app_cookie.cookie_name      # use `stickness.type` option.
        #   Value: <APPLICATION COOKIE NAME>
        # - Key: stickiness.app_cookie.duration_seconds # use `stickness.type` option.
        #   Value: '86400'                            # `86400`(default) or `1`(1 second) ~ `604800`(1 week)
        # - Key: stickiness.lb_cookie.duration_seconds  # use `stickness.type` option.
        #   Value: '86400'                            # `86400`(default) or `1`(1 second) ~ `604800`(1 week)
        # - Key: lambda.multi_value_headers.enabled     # use lambda function as the target.
        #   Value: false                              # `false`(default) or `true`
      TargetType: !Ref TargetType                       # `instance`(default), `ip`, `lambda` or `alb`
      UnhealthyThresholdCount: 2                    # `2`(default), `2` ~ `10`. If the target group protocol is TCP, TCP_UDP, UDP, TLS, HTTP or HTTPS, the default is `2`. For target groups with a protocol of GENEVE, the default is `3`. If the target type is lambda, the default is `5`.
      VpcId: !Ref VpcId
  
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '404'
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP                                # `GENEVE`, `HTTP`, `HTTPS`, `TCP`, `TCP_UDP`, `TLS`, `UDP`
  
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values: !Ref ListenerPathPattern
      ListenerArn: !Ref Listener
      Priority: 1
  
Outputs:
  SecurityGroupId:
    Value: !GetAtt SecurityGroup.GroupId
  TargetGroupArn:
    Value: !Ref TargetGroup
  ListenerArn:
    Value: !Ref Listener
  LoadBalancerArn:
    Value: !Ref LoadBalancer
  LoadBalancerDnsName:
    Value: !GetAtt LoadBalancer.DNSName
  LoadBalancerFullName:
    Value: !GetAtt LoadBalancer.LoadBalancerFullName
  LoadBalancerName:
    Value: !GetAtt LoadBalancer.LoadBalancerName
  LoadBalancerDashboardMetrics:
    Value: !Sub
      - |
        {
            "height": 1,
            "width": 24,
            "y": 0,
            "x": 0,
            "type": "text",
            "properties": {
                "markdown": "# Application Load Balanace Metrics (`${load_balancer_name}`)"
            }
        },
        {
            "type": "metric",
            "x": 0,
            "y": 1,
            "width": 6,
            "height": 6,
            "properties": {
                "metrics": [
                    [ "AWS/ApplicationELB", "RequestCount", "LoadBalancer", "${load_balancer_full_name}" ],
                    [ "...", "TargetConnectionErrorCount", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${region}",
                "period": 60,
                "stat": "Sum"
            }
        },
        {
            "type": "metric",
            "x": 6,
            "y": 1,
            "width": 6,
            "height": 6,
            "properties": {
                "metrics": [
                    [ "AWS/ApplicationELB", "ActiveConnectionCount", "LoadBalancer", "${load_balancer_full_name}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${region}",
                "stat": "Sum",
                "period": 60
            }
        },
        {
            "type": "metric",
            "x": 12,
            "y": 1,
            "width": 6,
            "height": 6,
            "properties": {
                "metrics": [
                    [ "AWS/ApplicationELB", "TargetResponseTime", "LoadBalancer", "${load_balancer_full_name}" ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${region}",
                "stat": "Average",
                "period": 60
            }
        },
        {
            "type": "metric",
            "x": 18,
            "y": 1,
            "width": 6,
            "height": 6,
            "properties": {
                "metrics": [
                    [ "AWS/ApplicationELB", "HTTPCode_Target_2XX_Count", "LoadBalancer", "${load_balancer_full_name}" ],
                    [ ".", "HTTPCode_Target_4XX_Count", ".", "." ],
                    [ ".", "HTTPCode_Target_5XX_Count", ".", "." ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${region}",
                "stat": "Sum",
                "period": 60
            }
        }
      - load_balancer_name: !GetAtt LoadBalancer.LoadBalancerName
        load_balancer_full_name: !GetAtt LoadBalancer.LoadBalancerFullName
        region: !Ref AWS::Region