AWSTemplateFormatVersion: "2010-09-09"

Description: AWS Load Balancer Controller for EKS cluster.

Parameters:
  ClusterName:
    Type: String
    Description: "[REQUIRED] The name of EKS cluster."
  
  ClusterOidcProvider:
    Type: String
    Description: "[REQUIRED] The IAM OIDC Provider for EKS cluster."

  ClusterOidcIssuerUrl:
    Type: String
    Description: "[REQUIRED] The OIDC Issuer URL of EKS cluster." 
  
  ClusterAutoscalerRoleName:
    Type: String
    Description: "[optional] The name of Cluster Autoscaler's IAM Role."
    Default: ""
  
  ServiceAccountRoleConfigArn:
    Type: String
    Description: "[REQUIRED] The ARN of ServiceAccountRoleConfigFunction."
  
  ProjectName:
    Type: String
    Description: "[REQUIRED] The name of this project."

Conditions:
  UseClusterAutoscalerRoleName:
    !Not [!Equals [!Ref ClusterAutoscalerRoleName, ""]]

Resources:
  ClusterAutoscalerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Ref ClusterOidcProvider
            Action:
              - "sts:AssumeRoleWithWebIdentity"
      Path: /
      Policies:
        - PolicyName: AmazonEKSClusterAutoscalerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - autoscaling:SetDesiredCapacity
                  - autoscaling:TerminateInstanceInAutoScalingGroup
                Resource: "*"
                Condition:
                  StringEquals:
                    aws:ResourceTag/k8s.io/cluster-autoscaler/my-cluster: owned
              - Sid: VisualEditor1
                Effect: Allow
                Action:
                  - autoscaling:DescribeAutoScalingInstances
                  - autoscaling:DescribeAutoScalingGroups
                  - ec2:DescribeLaunchTemplateVersions
                  - autoscaling:DescribeTags
                  - autoscaling:DescribeLaunchConfigurations
                Resource: "*"
      RoleName: !If
        - UseClusterAutoscalerRoleName
        - !Ref ClusterAutoscalerRoleName
        - !Sub "${ClusterName}-cluster-autoscaler-role"
      Tags:
        - Key: Name
          Value: !If
            - UseClusterAutoscalerRoleName
            - !Ref ClusterAutoscalerRoleName
            - !Sub "${ClusterName}-cluster-autoscaler-role"
        - Key: project
          Value: !Ref ProjectName

  ClusterAutoscalerRoleConfig:
    Type: Custom::ServiceAccountRoleConfig
    Properties:
      ServiceToken: !GetAtt ServiceAccountRoleConfigFunction.Arn
      RoleName: !Ref ClusterAutoscalerRole
      OidcIssuerUrl: !Ref ClusterOidcIssuerUrl
      OidcArn: !Ref ClusterOidcProvider
      Namespace: kube-system
      ServiceAccount: cluster-autoscaler

  ClusterAutoscalerResources:
    Type: AWSQS::Kubernetes::Resource
    DependsOn: ClusterAutoscalerRoleConfig
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: kube-system
      Manifest: !Sub
        - |
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            labels:
              k8s-addon: cluster-autoscaler.addons.k8s.io
              k8s-app: cluster-autoscaler
            name: cluster-autoscaler
            namespace: kube-system
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: cluster-autoscaler
            labels:
              k8s-addon: cluster-autoscaler.addons.k8s.io
              k8s-app: cluster-autoscaler
          rules:
            - apiGroups: [""]
              resources: ["events", "endpoints"]
              verbs: ["create", "patch"]
            - apiGroups: [""]
              resources: ["pods/eviction"]
              verbs: ["create"]
            - apiGroups: [""]
              resources: ["pods/status"]
              verbs: ["update"]
            - apiGroups: [""]
              resources: ["endpoints"]
              resourceNames: ["cluster-autoscaler"]
              verbs: ["get", "update"]
            - apiGroups: [""]
              resources: ["nodes"]
              verbs: ["watch", "list", "get", "update"]
            - apiGroups: [""]
              resources:
                - "namespaces"
                - "pods"
                - "services"
                - "replicationcontrollers"
                - "persistentvolumeclaims"
                - "persistentvolumes"
              verbs: ["watch", "list", "get"]
            - apiGroups: ["extensions"]
              resources: ["replicasets", "daemonsets"]
              verbs: ["watch", "list", "get"]
            - apiGroups: ["policy"]
              resources: ["poddisruptionbudgets"]
              verbs: ["watch", "list"]
            - apiGroups: ["apps"]
              resources: ["statefulsets", "replicasets", "daemonsets"]
              verbs: ["watch", "list", "get"]
            - apiGroups: ["storage.k8s.io"]
              resources: ["storageclasses", "csinodes", "csidrivers", "csistoragecapacities"]
              verbs: ["watch", "list", "get"]
            - apiGroups: ["batch", "extensions"]
              resources: ["jobs"]
              verbs: ["get", "list", "watch", "patch"]
            - apiGroups: ["coordination.k8s.io"]
              resources: ["leases"]
              verbs: ["create"]
            - apiGroups: ["coordination.k8s.io"]
              resourceNames: ["cluster-autoscaler"]
              resources: ["leases"]
              verbs: ["get", "update"]
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            name: cluster-autoscaler
            namespace: kube-system
            labels:
              k8s-addon: cluster-autoscaler.addons.k8s.io
              k8s-app: cluster-autoscaler
          rules:
            - apiGroups: [""]
              resources: ["configmaps"]
              verbs: ["create","list","watch"]
            - apiGroups: [""]
              resources: ["configmaps"]
              resourceNames: ["cluster-autoscaler-status", "cluster-autoscaler-priority-expander"]
              verbs: ["delete", "get", "update", "watch"]

          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: cluster-autoscaler
            labels:
              k8s-addon: cluster-autoscaler.addons.k8s.io
              k8s-app: cluster-autoscaler
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-autoscaler
          subjects:
            - kind: ServiceAccount
              name: cluster-autoscaler
              namespace: kube-system

          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: cluster-autoscaler
            namespace: kube-system
            labels:
              k8s-addon: cluster-autoscaler.addons.k8s.io
              k8s-app: cluster-autoscaler
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: Role
            name: cluster-autoscaler
          subjects:
            - kind: ServiceAccount
              name: cluster-autoscaler
              namespace: kube-system

          ---
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: cluster-autoscaler
            namespace: kube-system
            labels:
              app: cluster-autoscaler
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: cluster-autoscaler
            template:
              metadata:
                labels:
                  app: cluster-autoscaler
                annotations:
                  prometheus.io/scrape: 'true'
                  prometheus.io/port: '8085'
              spec:
                priorityClassName: system-cluster-critical
                securityContext:
                  runAsNonRoot: true
                  runAsUser: 65534
                  fsGroup: 65534
                serviceAccountName: cluster-autoscaler
                containers:
                  - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.23.0
                    name: cluster-autoscaler
                    resources:
                      limits:
                        cpu: 100m
                        memory: 600Mi
                      requests:
                        cpu: 100m
                        memory: 600Mi
                    command:
                      - ./cluster-autoscaler
                      - --v=4
                      - --stderrthreshold=info
                      - --cloud-provider=aws
                      - --skip-nodes-with-local-storage=false
                      - --expander=least-waste
                      - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/${cluster_name}
                      - --balance-similar-node-groups
                      - --skip-nodes-with-system-pods=false
                    volumeMounts:
                      - name: ssl-certs
                        mountPath: /etc/ssl/certs/ca-certificates.crt #/etc/ssl/certs/ca-bundle.crt for Amazon Linux Worker Nodes
                        readOnly: true
                    imagePullPolicy: "Always"
                volumes:
                  - name: ssl-certs
                    hostPath:
                      path: "/etc/ssl/certs/ca-bundle.crt"
        - cluster_name: !Ref ClusterName

  ClusterAutoscalerServiceAccountAnnotationUpdate:
    Type: AWSQS::Kubernetes::Resource
    DependsOn: ClusterAutoscalerResources
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: kube-system
      Manifest: !Sub
        - |
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            labels:
              k8s-addon: cluster-autoscaler.addons.k8s.io
              k8s-app: cluster-autoscaler
            annotations:
              eks.amazonaws.com/role-arn: ${cluster_autoscaler_role}
            name: cluster-autoscaler
            namespace: kube-system
        - cluster_autoscaler_role: !GetAtt ClusterAutoscalerRole.Arn

  ClusterAutoscalerDeploymentAnnotationUpdate:
    Type: AWSQS::Kubernetes::Resource
    DependsOn: ClusterAutoscalerServiceAccountAnnotationUpdate
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: kube-system
      Manifest: !Sub
        - |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: cluster-autoscaler
            namespace: kube-system
            labels:
              app: cluster-autoscaler
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: cluster-autoscaler
            template:
              metadata:
                labels:
                  app: cluster-autoscaler
                annotations:
                  prometheus.io/scrape: 'true'
                  prometheus.io/port: '8085'
                  cluster-autoscaler.kubernetes.io/safe-to-evict: 'false'
              spec:
                priorityClassName: system-cluster-critical
                securityContext:
                  runAsNonRoot: true
                  runAsUser: 65534
                  fsGroup: 65534
                serviceAccountName: cluster-autoscaler
                containers:
                  - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.23.0
                    name: cluster-autoscaler
                    resources:
                      limits:
                        cpu: 100m
                        memory: 600Mi
                      requests:
                        cpu: 100m
                        memory: 600Mi
                    command:
                      - ./cluster-autoscaler
                      - --v=4
                      - --stderrthreshold=info
                      - --cloud-provider=aws
                      - --skip-nodes-with-local-storage=false
                      - --expander=least-waste
                      - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/${cluster_name}
                    volumeMounts:
                      - name: ssl-certs
                        mountPath: /etc/ssl/certs/ca-certificates.crt #/etc/ssl/certs/ca-bundle.crt for Amazon Linux Worker Nodes
                        readOnly: true
                    imagePullPolicy: "Always"
                volumes:
                  - name: ssl-certs
                    hostPath:
                      path: "/etc/ssl/certs/ca-bundle.crt"
        - cluster_name: !Ref ClusterName

  ClusterAutoscalerDeploymentContainerUpdate:
    Type: AWSQS::Kubernetes::Resource
    DependsOn: ClusterAutoscalerDeploymentAnnotationUpdate
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: kube-system
      Manifest: !Sub
        - |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: cluster-autoscaler
            namespace: kube-system
            labels:
              app: cluster-autoscaler
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: cluster-autoscaler
            template:
              metadata:
                labels:
                  app: cluster-autoscaler
                annotations:
                  prometheus.io/scrape: 'true'
                  prometheus.io/port: '8085'
                  cluster-autoscaler.kubernetes.io/safe-to-evict: 'false'
              spec:
                priorityClassName: system-cluster-critical
                securityContext:
                  runAsNonRoot: true
                  runAsUser: 65534
                  fsGroup: 65534
                serviceAccountName: cluster-autoscaler
                containers:
                  - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.23.0
                    name: cluster-autoscaler
                    resources:
                      limits:
                        cpu: 100m
                        memory: 600Mi
                      requests:
                        cpu: 100m
                        memory: 600Mi
                    command:
                      - ./cluster-autoscaler
                      - --v=4
                      - --stderrthreshold=info
                      - --cloud-provider=aws
                      - --skip-nodes-with-local-storage=false
                      - --expander=least-waste
                      - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/${cluster_name}
                      - --balance-similar-node-groups
                      - --skip-nodes-with-system-pods=false
                    volumeMounts:
                      - name: ssl-certs
                        mountPath: /etc/ssl/certs/ca-certificates.crt #/etc/ssl/certs/ca-bundle.crt for Amazon Linux Worker Nodes
                        readOnly: true
                    imagePullPolicy: "Always"
                volumes:
                  - name: ssl-certs
                    hostPath:
                      path: "/etc/ssl/certs/ca-bundle.crt"
        - cluster_name: !Ref ClusterName

  ClusterAutoscalerDeploymentImageUpdate:
    Type: AWSQS::Kubernetes::Resource
    DependsOn: ClusterAutoscalerDeploymentContainerUpdate
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: kube-system
      Manifest: !Sub
        - |
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: cluster-autoscaler
            namespace: kube-system
            labels:
              app: cluster-autoscaler
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: cluster-autoscaler
            template:
              metadata:
                labels:
                  app: cluster-autoscaler
                annotations:
                  prometheus.io/scrape: 'true'
                  prometheus.io/port: '8085'
                  cluster-autoscaler.kubernetes.io/safe-to-evict: 'false'
              spec:
                priorityClassName: system-cluster-critical
                securityContext:
                  runAsNonRoot: true
                  runAsUser: 65534
                  fsGroup: 65534
                serviceAccountName: cluster-autoscaler
                containers:
                  - image: k8s.gcr.io/autoscaling/cluster-autoscaler:v{image_tag}
                    name: cluster-autoscaler
                    resources:
                      limits:
                        cpu: 100m
                        memory: 600Mi
                      requests:
                        cpu: 100m
                        memory: 600Mi
                    command:
                      - ./cluster-autoscaler
                      - --v=4
                      - --stderrthreshold=info
                      - --cloud-provider=aws
                      - --skip-nodes-with-local-storage=false
                      - --expander=least-waste
                      - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/${cluster_name}
                      - --balance-similar-node-groups
                      - --skip-nodes-with-system-pods=false
                    volumeMounts:
                      - name: ssl-certs
                        mountPath: /etc/ssl/certs/ca-certificates.crt #/etc/ssl/certs/ca-bundle.crt for Amazon Linux Worker Nodes
                        readOnly: true
                    imagePullPolicy: "Always"
                volumes:
                  - name: ssl-certs
                    hostPath:
                      path: "/etc/ssl/certs/ca-bundle.crt"
        - image_tag: !FindInMap [ClusterAutoscalerImageVersionMap, !Ref ClusterVersion, latest]
          cluster_name: !Ref ClusterName

  # ClusterAutoscalerOverProvisioningPod:
    Type: AWSQS::Kubernetes::Resource
    DependsOn: ClusterAutoscalerDeploymentImageUpdate
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: kube-system
      Manifest: |
        ---
        apiVersion: scheduling.k8s.io/v1beta1
        kind: PriorityClass
        metadata:
          name: overprovisioning
        value: -1
        globalDefault: false
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: overprovisioning
          namespace: kube-system
        spec:
          replicas: 3
          selector:
            matchLabels:
              run: overprovisioning
          template:
            metadata:
              labels:
                run: overprovisioning
            spec:
              priorityClassName: overprovisioning
              containers:
              - name: reserve-resources
                image: k8s.gcr.io/pause
                resources:
                  requests:
                    cpu: 820m
                    memory: 2000Mi