AWSTemplateFormatVersion: "2010-09-09"

Description: ADOT for EKS cluster.

Parameters:
  ClusterName:
    Type: String
    Description: "[REQUIRED] The name of EKS cluster."
  
  ClusterOidcProvider:
    Type: String
    Description: "[REQUIRED] The IAM OIDC Provider for EKS cluster."

  ClusterOidcIssuerUrl:
    Type: String
    Description: "[REQUIRED] The OIDC Issuer URL of EKS cluster." 
  
  ServiceAccountRoleConfigArn:
    Type: String
    Description: "[REQUIRED] The ARN of ServiceAccountRoleConfigFunction."
  
  ProjectName:
    Type: String
    Description: "[REQUIRED] The name of this project."
  
  EnableAdotOnNodegroup:
    Type: String
    Description: "[optional] Enable or disable EKS cluster's ADOT for EC2 nodegroup."
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
  
  AdotOnNodegroupRoleName:
    Type: String
    Description: "[optional] The name of ADOT for EC2 nodegroup's IAM Role."
    Default: ""
  
  EnableAdotOnFargate:
    Type: String
    Description: "[optional] Enable or disable EKS cluster's ADOT for Fargate."
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
  
  AdotOnFargateRoleName:
    Type: String
    Description: "[optional] The name of ADOT for Fargate's IAM Role."
    Default: ""


Conditions:
  IsEnableAdotOnNodegroup: !Equals [!Ref EnableAdotOnNodegroup, "true"]
  IsEnableAdotOnFargate: !Equals [!Ref EnableAdotOnFargate, "true"]

  UseAdotOnNodegroupRoleName:
    !Not [!Equals [!Ref AdotOnNodegroupRoleName, ""]]
  UseAdotOnFargateRoleName:
    !Not [!Equals [!Ref AdotOnFargateRoleName, ""]]

Resources:
  AdotOnNodegroupRole:
    Type: AWS::IAM::Role
    Condition: IsEnableAdotOnNodegroup
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Ref ClusterOidcProvider
            Action:
              - "sts:AssumeRoleWithWebIdentity"
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
      RoleName: !If
        - UseAdotOnNodegroupRoleName
        - !Ref AdotOnNodegroupRoleName
        - !Sub "${ClusterName}-adot-nodegroup-role"
      Tags:
        - Key: Name
          Value: !If
            - UseAdotOnNodegroupRoleName
            - !Ref AdotOnNodegroupRoleName
            - !Sub "${ClusterName}-adot-nodegroup-role"
        - Key: project
          Value: !Ref ProjectName

  AdotOnNodegroupRoleConfig:
    Type: Custom::ServiceAccountRoleConfig
    Condition: IsEnableAdotOnNodegroup
    Properties:
      ServiceToken: !Ref ServiceAccountRoleConfigArn
      RoleName: !Ref AdotOnNodegroupRole
      OidcIssuerUrl: !Ref ClusterOidcIssuerUrl
      OidcArn: !Ref ClusterOidcProvider
      Namespace: aws-otel-eks
      ServiceAccount: aws-otel-sa

  AdotOnNodegroupResources:
    Type: AWSQS::Kubernetes::Resource
    Condition: IsEnableAdotOnNodegroup
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: aws-otel-eks
      Manifest: !Sub
        - |
          # create namespace
          apiVersion: v1
          kind: Namespace
          metadata:
            name: aws-otel-eks
            labels:
              name: aws-otel-eks

          ---
          # create cwagent service account and role binding
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: aws-otel-sa
            namespace: aws-otel-eks
            annotations:
              eks.amazonaws.com/role-arn: ${adot_on_nodegroup_role}
          ---
          kind: ClusterRole
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: aoc-agent-role
          rules:
            - apiGroups: [""]
              resources: ["pods", "nodes", "endpoints"]
              verbs: ["list", "watch", "get"]
            - apiGroups: ["apps"]
              resources: ["replicasets"]
              verbs: ["list", "watch", "get"]
            - apiGroups: ["batch"]
              resources: ["jobs"]
              verbs: ["list", "watch"]
            - apiGroups: [""]
              resources: ["nodes/proxy"]
              verbs: ["get"]
            - apiGroups: [""]
              resources: ["nodes/stats", "configmaps", "events"]
              verbs: ["create", "get"]
            - apiGroups: [""]
              resources: ["configmaps"]
              verbs: ["update"]
            - apiGroups: [""]
              resources: ["configmaps"]
              resourceNames: ["otel-container-insight-clusterleader"]
              verbs: ["get","update", "create"]
            - apiGroups: ["coordination.k8s.io"]
              resources: ["leases"]
              verbs: ["create","get", "update"]
            - apiGroups: ["coordination.k8s.io"]
              resources: ["leases"]
              resourceNames: ["otel-container-insight-clusterleader"]
              verbs: ["get","update", "create"]

          ---
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: aoc-agent-role-binding
          subjects:
            - kind: ServiceAccount
              name: aws-otel-sa
              namespace: aws-otel-eks
          roleRef:
            kind: ClusterRole
            name: aoc-agent-role
            apiGroup: rbac.authorization.k8s.io

          ---
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: otel-agent-conf
            namespace: aws-otel-eks
            labels:
              app: opentelemetry
              component: otel-agent-conf
          data:
            otel-agent-config: |
              extensions:
                health_check:

              receivers:
                awscontainerinsightreceiver:

              processors:
                batch/metrics:
                  timeout: 60s

              exporters:
                awsemf:
                  namespace: ContainerInsights
                  log_group_name: '/aws/containerinsights/{ClusterName}/performance'
                  log_stream_name: '{NodeName}'
                  resource_to_telemetry_conversion:
                    enabled: true
                  dimension_rollup_option: NoDimensionRollup
                  parse_json_encoded_attr_values: [Sources, kubernetes]
                  metric_declarations:
                    # node metrics
                    - dimensions: [[NodeName, InstanceId, ClusterName]]
                      metric_name_selectors:
                        - node_cpu_utilization
                        - node_memory_utilization
                        - node_network_total_bytes
                        - node_cpu_reserved_capacity
                        - node_memory_reserved_capacity
                        - node_number_of_running_pods
                        - node_number_of_running_containers
                    - dimensions: [[ClusterName]]
                      metric_name_selectors:
                        - node_cpu_utilization
                        - node_memory_utilization
                        - node_network_total_bytes
                        - node_cpu_reserved_capacity
                        - node_memory_reserved_capacity
                        - node_number_of_running_pods
                        - node_number_of_running_containers
                        - node_cpu_usage_total
                        - node_cpu_limit
                        - node_memory_working_set
                        - node_memory_limit

                    # pod metrics
                    - dimensions: [[PodName, Namespace, ClusterName], [Service, Namespace, ClusterName], [Namespace, ClusterName], [ClusterName]]
                      metric_name_selectors:
                        - pod_cpu_utilization
                        - pod_memory_utilization
                        - pod_network_rx_bytes
                        - pod_network_tx_bytes
                        - pod_cpu_utilization_over_pod_limit
                        - pod_memory_utilization_over_pod_limit
                    - dimensions: [[PodName, Namespace, ClusterName], [ClusterName]]
                      metric_name_selectors:
                        - pod_cpu_reserved_capacity
                        - pod_memory_reserved_capacity
                    - dimensions: [[PodName, Namespace, ClusterName]]
                      metric_name_selectors:
                        - pod_number_of_container_restarts

                    # cluster metrics
                    - dimensions: [[ClusterName]]
                      metric_name_selectors:
                        - cluster_node_count
                        - cluster_failed_node_count

                    # service metrics
                    - dimensions: [[Service, Namespace, ClusterName], [ClusterName]]
                      metric_name_selectors:
                        - service_number_of_running_pods

                    # node fs metrics
                    - dimensions: [[NodeName, InstanceId, ClusterName], [ClusterName]]
                      metric_name_selectors:
                        - node_filesystem_utilization

                    # namespace metrics
                    - dimensions: [[Namespace, ClusterName], [ClusterName]]
                      metric_name_selectors:
                        - namespace_number_of_running_pods

              service:
                pipelines:
                  metrics:
                    receivers: [awscontainerinsightreceiver]
                    processors: [batch/metrics]
                    exporters: [awsemf]

                extensions: [health_check]


          ---
          # create Daemonset
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            name: aws-otel-eks-ci
            namespace: aws-otel-eks
          spec:
            selector:
              matchLabels:
                name: aws-otel-eks-ci
            template:
              metadata:
                labels:
                  name: aws-otel-eks-ci
              spec:
                containers:
                  - name: aws-otel-collector
                    image: amazon/aws-otel-collector:latest
                    env:
                      - name: K8S_NODE_NAME
                        valueFrom:
                          fieldRef:
                            fieldPath: spec.nodeName
                      - name: HOST_IP
                        valueFrom:
                          fieldRef:
                            fieldPath: status.hostIP
                      - name: HOST_NAME
                        valueFrom:
                          fieldRef:
                            fieldPath: spec.nodeName
                      - name: K8S_NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.namespace
                    imagePullPolicy: Always
                    command:
                      - "/awscollector"
                      - "--config=/conf/otel-agent-config.yaml"
                    volumeMounts:
                      - name: rootfs
                        mountPath: /rootfs
                        readOnly: true
                      - name: dockersock
                        mountPath: /var/run/docker.sock
                        readOnly: true
                      - name: containerdsock
                        mountPath: /run/containerd/containerd.sock
                      - name: varlibdocker
                        mountPath: /var/lib/docker
                        readOnly: true
                      - name: sys
                        mountPath: /sys
                        readOnly: true
                      - name: devdisk
                        mountPath: /dev/disk
                        readOnly: true
                      - name: otel-agent-config-vol
                        mountPath: /conf
                    resources:
                      limits:
                        cpu:  200m
                        memory: 200Mi
                      requests:
                        cpu: 200m
                        memory: 200Mi
                volumes:
                  - configMap:
                      name: otel-agent-conf
                      items:
                        - key: otel-agent-config
                          path: otel-agent-config.yaml
                    name: otel-agent-config-vol
                  - name: rootfs
                    hostPath:
                      path: /
                  - name: dockersock
                    hostPath:
                      path: /var/run/docker.sock
                  - name: varlibdocker
                    hostPath:
                      path: /var/lib/docker
                  - name: containerdsock
                    hostPath:
                      path: /run/containerd/containerd.sock
                  - name: sys
                    hostPath:
                      path: /sys
                  - name: devdisk
                    hostPath:
                      path: /dev/disk/
                serviceAccountName: aws-otel-sa
        - adot_on_nodegroup_role: !GetAtt AdotOnNodegroupRole.Arn

  AdotOnFargateRole:
    Type: AWS::IAM::Role
    Condition: IsEnableAdotOnFargate
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Ref ClusterOidcProvider
            Action:
              - "sts:AssumeRoleWithWebIdentity"
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
      RoleName: !If
        - UseAdotOnFargateRoleName
        - !Ref AdotOnFargateRoleName
        - !Sub "${ClusterName}-adot-fargate-role"
      Tags:
        - Key: Name
          Value: !If
            - UseAdotOnFargateRoleName
            - !Ref AdotOnFargateRoleName
            - !Sub "${ClusterName}-adot-fargate-role"
        - Key: project
          Value: !Ref ProjectName

  AdotOnFargateRoleConfig:
    Type: Custom::ServiceAccountRoleConfig
    Condition: IsEnableAdotOnFargate
    Properties:
      ServiceToken: !Ref ServiceAccountRoleConfigArn
      RoleName: !Ref AdotOnFargateRole
      OidcIssuerUrl: !Ref ClusterOidcIssuerUrl
      OidcArn: !Ref ClusterOidcProvider
      Namespace: fargate-container-insights
      ServiceAccount: adot-collector
  
  AdotOnFargateResources:
    Type: AWSQS::Kubernetes::Resource
    Condition: IsEnableAdotOnFargate
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: fargate-container-insights
      Manifest: !Sub
        - |
          ---
          apiVersion: v1
          kind: Namespace
          metadata:
            name: fargate-container-insights
            labels:
              name: fargate-container-insights
          ---
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: adot-collector
            namespace: fargate-container-insights
            annotations:
              eks.amazonaws.com/role-arn: ${adot_on_fargate_role}
          ---
          kind: ClusterRole
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: adotcol-admin-role
          rules:
            - apiGroups: [""]
              resources:
                - nodes
                - nodes/proxy
                - nodes/metrics
                - services
                - endpoints
                - pods
                - pods/proxy
              verbs: ["get", "list", "watch"]
            - nonResourceURLs: [ "/metrics/cadvisor"]
              verbs: ["get", "list", "watch"]

          ---
          kind: ClusterRoleBinding
          apiVersion: rbac.authorization.k8s.io/v1
          metadata:
            name: adotcol-admin-role-binding
          subjects:
            - kind: ServiceAccount
              name: adot-collector
              namespace: fargate-container-insights
          roleRef:
            kind: ClusterRole
            name: adotcol-admin-role
            apiGroup: rbac.authorization.k8s.io

          # collector configuration section
          # update `ClusterName=YOUR-EKS-CLUSTER-NAME` in the env variable OTEL_RESOURCE_ATTRIBUTES
          # update `region=us-east-1` in the emfexporter if you are not using us-east-1 region
          ---
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: adot-collector-config
            namespace: fargate-container-insights
            labels:
              app: aws-adot
              component: adot-collector-config
          data:
            adot-collector-config: |
              receivers:
                prometheus:
                  config:
                    global:
                      scrape_interval: 1m
                      scrape_timeout: 40s

                    scrape_configs:
                    - job_name: 'kubelets-cadvisor-metrics'
                      sample_limit: 10000
                      scheme: https

                      kubernetes_sd_configs:
                      - role: node
                      tls_config:
                        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

                      relabel_configs:
                        - action: labelmap
                          regex: __meta_kubernetes_node_label_(.+)
                          # Only for Kubernetes ^1.7.3.
                          # See: https://github.com/prometheus/prometheus/issues/2916
                        - target_label: __address__
                          # Changes the address to Kube API server's default address and port
                          replacement: kubernetes.default.svc:443
                        - source_labels: [__meta_kubernetes_node_name]
                          regex: (.+)
                          target_label: __metrics_path__
                          # Changes the default metrics path to kubelet's proxy cadvdisor metrics endpoint
                          replacement: /api/v1/nodes/$${!1}/proxy/metrics/cadvisor
                      metric_relabel_configs:
                        # extract readable container/pod name from id field
                        - action: replace
                          source_labels: [id]
                          regex: '^/machine\.slice/machine-rkt\\x2d([^\\]+)\\.+/([^/]+)\.service$'
                          target_label: rkt_container_name
                          replacement: '$${!2}-$${!1}'
                        - action: replace
                          source_labels: [id]
                          regex: '^/system\.slice/(.+)\.service$'
                          target_label: systemd_service_name
                          replacement: '$${!1}'
              processors:
                # rename labels which apply to all metrics and are used in metricstransform/rename processor
                metricstransform/label_1:
                  transforms:
                    - include: .*
                      match_type: regexp
                      action: update
                      operations:
                        - action: update_label
                          label: name
                          new_label: container_id
                        - action: update_label
                          label: kubernetes_io_hostname
                          new_label: NodeName
                        - action: update_label
                          label: eks_amazonaws_com_compute_type
                          new_label: LaunchType

                # rename container and pod metrics which we care about.
                # container metrics are renamed to `new_container_*` to differentiate them with unused container metrics
                metricstransform/rename:
                  transforms:
                    - include: container_spec_cpu_quota
                      new_name: new_container_cpu_limit_raw
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"container": "\\S", "LaunchType": "fargate"}
                    - include: container_spec_cpu_shares
                      new_name: new_container_cpu_request
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"container": "\\S", "LaunchType": "fargate"}
                    - include: container_cpu_usage_seconds_total
                      new_name: new_container_cpu_usage_seconds_total
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"container": "\\S", "LaunchType": "fargate"}
                    - include: container_spec_memory_limit_bytes
                      new_name: new_container_memory_limit
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"container": "\\S", "LaunchType": "fargate"}
                    - include: container_memory_cache
                      new_name: new_container_memory_cache
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"container": "\\S", "LaunchType": "fargate"}
                    - include: container_memory_max_usage_bytes
                      new_name: new_container_memory_max_usage
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"container": "\\S", "LaunchType": "fargate"}
                    - include: container_memory_usage_bytes
                      new_name: new_container_memory_usage
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"container": "\\S", "LaunchType": "fargate"}
                    - include: container_memory_working_set_bytes
                      new_name: new_container_memory_working_set
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"container": "\\S", "LaunchType": "fargate"}
                    - include: container_memory_rss
                      new_name: new_container_memory_rss
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"container": "\\S", "LaunchType": "fargate"}
                    - include: container_memory_swap
                      new_name: new_container_memory_swap
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"container": "\\S", "LaunchType": "fargate"}
                    - include: container_memory_failcnt
                      new_name: new_container_memory_failcnt
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"container": "\\S", "LaunchType": "fargate"}
                    - include: container_memory_failures_total
                      new_name: new_container_memory_hierarchical_pgfault
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"container": "\\S", "LaunchType": "fargate", "failure_type": "pgfault", "scope": "hierarchy"}
                    - include: container_memory_failures_total
                      new_name: new_container_memory_hierarchical_pgmajfault
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"container": "\\S", "LaunchType": "fargate", "failure_type": "pgmajfault", "scope": "hierarchy"}
                    - include: container_memory_failures_total
                      new_name: new_container_memory_pgfault
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"container": "\\S", "LaunchType": "fargate", "failure_type": "pgfault", "scope": "container"}
                    - include: container_memory_failures_total
                      new_name: new_container_memory_pgmajfault
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"container": "\\S", "LaunchType": "fargate", "failure_type": "pgmajfault", "scope": "container"}
                    - include: container_fs_limit_bytes
                      new_name: new_container_filesystem_capacity
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"container": "\\S", "LaunchType": "fargate"}
                    - include: container_fs_usage_bytes
                      new_name: new_container_filesystem_usage
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"container": "\\S", "LaunchType": "fargate"}
                    # POD LEVEL METRICS
                    - include: container_spec_cpu_quota
                      new_name: pod_cpu_limit_raw
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"image": "^$", "container": "^$", "pod": "\\S", "LaunchType": "fargate"}
                    - include: container_spec_cpu_shares
                      new_name: pod_cpu_request
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"image": "^$", "container": "^$", "pod": "\\S", "LaunchType": "fargate"}
                    - include: container_cpu_usage_seconds_total
                      new_name: pod_cpu_usage_seconds_total
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"image": "^$", "container": "^$", "pod": "\\S", "LaunchType": "fargate"}
                    - include: container_spec_memory_limit_bytes
                      new_name: pod_memory_limit
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"image": "^$", "container": "^$", "pod": "\\S", "LaunchType": "fargate"}
                    - include: container_memory_cache
                      new_name: pod_memory_cache
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"image": "^$", "container": "^$", "pod": "\\S", "LaunchType": "fargate"}
                    - include: container_memory_max_usage_bytes
                      new_name: pod_memory_max_usage
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"image": "^$", "container": "^$", "pod": "\\S", "LaunchType": "fargate"}
                    - include: container_memory_usage_bytes
                      new_name: pod_memory_usage
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"image": "^$", "container": "^$", "pod": "\\S", "LaunchType": "fargate"}
                    - include: container_memory_working_set_bytes
                      new_name: pod_memory_working_set
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"image": "^$", "container": "^$", "pod": "\\S", "LaunchType": "fargate"}
                    - include: container_memory_rss
                      new_name: pod_memory_rss
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"image": "^$", "container": "^$", "pod": "\\S", "LaunchType": "fargate"}
                    - include: container_memory_swap
                      new_name: pod_memory_swap
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"image": "^$", "container": "^$", "pod": "\\S", "LaunchType": "fargate"}
                    - include: container_memory_failcnt
                      new_name: pod_memory_failcnt
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"image": "^$", "container": "^$", "pod": "\\S", "LaunchType": "fargate"}
                    - include: container_memory_failures_total
                      new_name: pod_memory_hierarchical_pgfault
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"image": "^$", "container": "^$", "pod": "\\S", "LaunchType": "fargate", "failure_type": "pgfault", "scope": "hierarchy"}
                    - include: container_memory_failures_total
                      new_name: pod_memory_hierarchical_pgmajfault
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"image": "^$", "container": "^$", "pod": "\\S", "LaunchType": "fargate", "failure_type": "pgmajfault", "scope": "hierarchy"}
                    - include: container_memory_failures_total
                      new_name: pod_memory_pgfault
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"image": "^$", "container": "^$", "pod": "\\S", "LaunchType": "fargate", "failure_type": "pgfault", "scope": "container"}
                    - include: container_memory_failures_total
                      new_name: pod_memory_pgmajfault
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"image": "^$", "container": "^$", "pod": "\\S", "LaunchType": "fargate", "failure_type": "pgmajfault", "scope": "container"}
                    - include: container_network_receive_bytes_total
                      new_name: pod_network_rx_bytes
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"pod": "\\S", "LaunchType": "fargate"}
                    - include: container_network_receive_packets_dropped_total
                      new_name: pod_network_rx_dropped
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"pod": "\\S", "LaunchType": "fargate"}
                    - include: container_network_receive_errors_total
                      new_name: pod_network_rx_errors
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"pod": "\\S", "LaunchType": "fargate"}
                    - include: container_network_receive_packets_total
                      new_name: pod_network_rx_packets
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"pod": "\\S", "LaunchType": "fargate"}
                    - include: container_network_transmit_bytes_total
                      new_name: pod_network_tx_bytes
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"pod": "\\S", "LaunchType": "fargate"}
                    - include: container_network_transmit_packets_dropped_total
                      new_name: pod_network_tx_dropped
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"pod": "\\S", "LaunchType": "fargate"}
                    - include: container_network_transmit_errors_total
                      new_name: pod_network_tx_errors
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"pod": "\\S", "LaunchType": "fargate"}
                    - include: container_network_transmit_packets_total
                      new_name: pod_network_tx_packets
                      action: insert
                      match_type: regexp
                      experimental_match_labels: {"pod": "\\S", "LaunchType": "fargate"}

                # filter out only renamed metrics which we care about
                filter:
                  metrics:
                    include:
                      match_type: regexp
                      metric_names:
                        - new_container_.*
                        - pod_.*

                # convert cumulative sum datapoints to delta
                cumulativetodelta:
                  include:
                      metrics:
                          - new_container_cpu_usage_seconds_total
                          - pod_cpu_usage_seconds_total
                          - pod_memory_pgfault
                          - pod_memory_pgmajfault
                          - pod_memory_hierarchical_pgfault
                          - pod_memory_hierarchical_pgmajfault
                          - pod_network_rx_bytes
                          - pod_network_rx_dropped
                          - pod_network_rx_errors
                          - pod_network_rx_packets
                          - pod_network_tx_bytes
                          - pod_network_tx_dropped
                          - pod_network_tx_errors
                          - pod_network_tx_packets
                          - new_container_memory_pgfault
                          - new_container_memory_pgmajfault
                          - new_container_memory_hierarchical_pgfault
                          - new_container_memory_hierarchical_pgmajfault
                      match_type: strict

                # convert delta to rate
                deltatorate:
                  metrics:
                    - new_container_cpu_usage_seconds_total
                    - pod_cpu_usage_seconds_total
                    - pod_memory_pgfault
                    - pod_memory_pgmajfault
                    - pod_memory_hierarchical_pgfault
                    - pod_memory_hierarchical_pgmajfault
                    - pod_network_rx_bytes
                    - pod_network_rx_dropped
                    - pod_network_rx_errors
                    - pod_network_rx_packets
                    - pod_network_tx_bytes
                    - pod_network_tx_dropped
                    - pod_network_tx_errors
                    - pod_network_tx_packets
                    - new_container_memory_pgfault
                    - new_container_memory_pgmajfault
                    - new_container_memory_hierarchical_pgfault
                    - new_container_memory_hierarchical_pgmajfault

                experimental_metricsgeneration/1:
                  rules:
                    - name: pod_network_total_bytes
                      unit: Bytes/Second
                      type: calculate
                      metric1: pod_network_rx_bytes
                      metric2: pod_network_tx_bytes
                      operation: add
                    - name: pod_memory_utilization_over_pod_limit
                      unit: Percent
                      type: calculate
                      metric1: pod_memory_working_set
                      metric2: pod_memory_limit
                      operation: percent
                    - name: pod_cpu_usage_total
                      unit: Millicore
                      type: scale
                      metric1: pod_cpu_usage_seconds_total
                      operation: multiply
                      # core to millicore: multiply by 1000
                      # millicore seconds to millicore nanoseconds: multiply by 10^9
                      scale_by: 1000
                    - name: pod_cpu_limit
                      unit: Millicore
                      type: scale
                      metric1: pod_cpu_limit_raw
                      operation: divide
                      scale_by: 100

                experimental_metricsgeneration/2:
                  rules:
                    - name: pod_cpu_utilization_over_pod_limit
                      type: calculate
                      unit: Percent
                      metric1: pod_cpu_usage_total
                      metric2: pod_cpu_limit
                      operation: percent

                # add `Type` and rename metrics and labels
                metricstransform/label_2:
                  transforms:
                    - include: pod_.*
                      match_type: regexp
                      action: update
                      operations:
                        - action: add_label
                          new_label: Type
                          new_value: "Pod"
                    - include: new_container_.*
                      match_type: regexp
                      action: update
                      operations:
                        - action: add_label
                          new_label: Type
                          new_value: Container
                    - include: .*
                      match_type: regexp
                      action: update
                      operations:
                        - action: update_label
                          label: namespace
                          new_label: Namespace
                        - action: update_label
                          label: pod
                          new_label: PodName
                    - include: ^new_container_(.*)$$
                      match_type: regexp
                      action: update
                      new_name: container_$$1

                # add cluster name from env variable and EKS metadata
                resourcedetection:
                  detectors: [env, eks]

                batch:
                  timeout: 60s

              # only pod level metrics in metrics format, details in https://aws-otel.github.io/docs/getting-started/container-insights/eks-fargate
              exporters:
                awsemf:
                  log_group_name: '/aws/containerinsights/{ClusterName}/performance'
                  log_stream_name: '{PodName}'
                  namespace: 'ContainerInsights'
                  region: ${region}
                  resource_to_telemetry_conversion:
                    enabled: true
                  eks_fargate_container_insights_enabled: true
                  parse_json_encoded_attr_values: ["kubernetes"]
                  dimension_rollup_option: NoDimensionRollup
                  metric_declarations:
                    - dimensions: [ [ClusterName, LaunchType], [ClusterName, Namespace, LaunchType], [ClusterName, Namespace, PodName, LaunchType]]
                      metric_name_selectors:
                        - pod_cpu_utilization_over_pod_limit
                        - pod_cpu_usage_total
                        - pod_cpu_limit
                        - pod_memory_utilization_over_pod_limit
                        - pod_memory_working_set
                        - pod_memory_limit
                        - pod_network_rx_bytes
                        - pod_network_tx_bytes

              extensions:
                health_check:

              service:
                pipelines:
                  metrics:
                    receivers: [prometheus]
                    processors: [metricstransform/label_1, resourcedetection, metricstransform/rename, filter, cumulativetodelta, deltatorate, experimental_metricsgeneration/1, experimental_metricsgeneration/2, metricstransform/label_2, batch]
                    exporters: [awsemf]
                extensions: [health_check]

          # configure the service and the collector as a StatefulSet
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: adot-collector-service
            namespace: fargate-container-insights
            labels:
              app: aws-adot
              component: adot-collector
          spec:
            ports:
              - name: metrics # default endpoint for querying metrics.
                port: 8888
            selector:
              component: adot-collector
            type: ClusterIP
          ---
          apiVersion: apps/v1
          kind: StatefulSet
          metadata:
            name: adot-collector
            namespace: fargate-container-insights
            labels:
              app: aws-adot
              component: adot-collector
          spec:
            selector:
              matchLabels:
                app: aws-adot
                component: adot-collector
            serviceName: adot-collector-service
            template:
              metadata:
                labels:
                  app: aws-adot
                  component: adot-collector
              spec:
                serviceAccountName: adot-collector
                securityContext:
                  fsGroup: 65534
                containers:
                  - image: amazon/aws-otel-collector:latest
                    name: adot-collector
                    imagePullPolicy: Always
                    command:
                      - "/awscollector"
                      - "--config=/conf/adot-collector-config.yaml"
                    env:
                      - name: OTEL_RESOURCE_ATTRIBUTES
                        value: "ClusterName=${cluster_name}"
                    resources:
                      limits:
                        cpu: 2
                        memory: 2Gi
                      requests:
                        cpu: 200m
                        memory: 400Mi
                    volumeMounts:
                      - name: adot-collector-config-volume
                        mountPath: /conf
                volumes:
                  - configMap:
                      name: adot-collector-config
                      items:
                        - key: adot-collector-config
                          path: adot-collector-config.yaml
                    name: adot-collector-config-volume
          ---
        - adot_on_fargate_role: !GetAtt AdotOnFargateRole.Arn
          cluster_name: !Ref ClusterName
          region: !Ref AWS::Region
