AWSTemplateFormatVersion: "2010-09-09"

Description: Amazon Managed Prometheus for EKS cluster.

Parameters:
  ClusterName:
    Type: String
    Description: "[REQUIRED] The name of EKS cluster."
  
  ClusterOidcProvider:
    Type: String
    Description: "[REQUIRED] The IAM OIDC Provider for EKS cluster."

  ClusterOidcIssuerUrl:
    Type: String
    Description: "[REQUIRED] The OIDC Issuer URL of EKS cluster." 
  
  ServiceAccountRoleConfigArn:
    Type: String
    Description: "[REQUIRED] The ARN of ServiceAccountRoleConfigFunction."
  
  ProjectName:
    Type: String
    Description: "[REQUIRED] The name of this project."
  
  PrometheusWorkspaceName:
    Type: String
    Description: "[REQUIRED] The name of Prometheus Workspace."
  
  PrometheusAlertManagerDefinition:
    Type: String
    Description: "[optional] The definition of Prometheus's Alert Manager."
    Default: ""
  
  PrometheusLogGroupName:
    Type: String
    Description: "[optional] The name of Prometheus's Log Group."
    Default: ""

Conditions:
  UseAlartManagerDefinition: !Not [!Equals [!Ref PrometheusAlertManagerDefinition, ""]]
  UseLogGroup: !Not [!Equals [!Ref PrometheusLogGroupName, ""]]

Resources:
  PrometheusLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !If
        - UseLogGroup
        - !Ref PrometheusLogGroupName
        - !Sub
          - '/aws/prometheus/${workspace_name}'
          - workspace_name: !Ref PrometheusWorkspaceName

  PrometheusWorkspace:
    Type: AWS::APS::Workspace
    Properties:
      AlertManagerDefinition: !If
        - UseAlartManagerDefinition
        - !Ref PrometheusAlertManagerDefinition
        - !Ref AWS::NoValue
      Alias: !Ref PrometheusWorkspaceName
      LoggingConfiguration:
        LogGroupArn: !GetAtt PrometheusLogGroup.Arn
      Tags:
        - Key: project
          Value: ProjectName

  PrometheusRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Ref ClusterOidcProvider
            Action:
              - "sts:AssumeRoleWithWebIdentity"
      Path: /
      Policies:
        - PolicyName: AMPIngestPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - aps:RemoteWrite
              - aps:GetSeries
              - aps:GetLabels
              - aps:GetMetricMetadata
              Resource: "*"
      RoleName: amp-iamproxy-ingest-role
      Tags:
        - Key: Name
          Value: amp-iamproxy-ingest-role
        - Key: project
          Value: !Ref ProjectName

  PrometheusRoleConfig:
    Type: Custom::ServiceAccountRoleConfig
    DependsOn: PrometheusRole
    Properties:
      ServiceToken: !Ref ServiceAccountRoleConfigArn
      RoleName: !Ref PrometheusRole
      OidcIssuerUrl: !Ref ClusterOidcIssuerUrl
      OidcArn: !Ref ClusterOidcProvider
      Namespace: prometheus
      ServiceAccount: amp-iamproxy-ingest-service-account
  
  PrometheusNamespace:
    Type: AWSQS::Kubernetes::Resource
    DependsOn: PrometheusRoleConfig
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: prometheus
      Manifest: |
        apiVersion: v1
        kind: Namespace
        metadata:
          name: prometheus

  PrometheusHelmChart:
    Type: AWSQS::Kubernetes::Helm
    DependsOn: PrometheusNamespace
    Properties:
      ClusterID: !Ref ClusterName
      Name: prometheus-community
      Namespace: prometheus
      Repository: https://prometheus-community.github.io/helm-charts
      Chart: prometheus-community/prometheus
      ValueYaml: !Sub
        - |
          serviceAccounts:
              server:
                  name: "amp-iamproxy-ingest-service-account"
                  annotations:
                      eks.amazonaws.com/role-arn: "${role_arn}"
          server:
              remoteWrite:
                  - url: ${prometheus_endpoint}/api/v1/remote_write
                    sigv4:
                      region: ${region}
                    queue_config:
                      max_samples_per_send: 1000
                      max_shards: 200
                      capacity: 2500
        - role_arn: !GetAtt PrometheusRole.Arn
          prometheus_endpoint: !GetAtt PrometheusWorkspace.PrometheusEndpoint
          region: !Ref AWS::Region
